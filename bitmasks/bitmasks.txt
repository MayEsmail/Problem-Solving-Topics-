Computer uses binary representation (bits) to represent data

Why to use bitmasks in problem solving?
= Sometimes it provides better time Order
= Sometimes it provides better memory Order  
= Sometimes it allows you to write shorter code


Notes:
• integer number is represented in 32 bit , long long integer is represented in 64 bits. 
• int x=4 => x is stord in memory in this form 00000000000000000000000000000100  
• in signed numbers if the MSB is 1 the number is negative eg: 1.......11 negative number
                    else if MSB = 0 the numper is Positive eg: 0.......11 positive number. 


bitwise operators
	&	And
	|	OR
	~	Invert =(not in logic)
	^	XOR
	<<	shift right
	>>	shift left


Assesume that we have 2 integers X and Y  
X=1152   =>     10010000000
y=1428   =>     10110010100
x&y      =      10010000000
x|y      =      10110010100
x^y      =      00100010100
~X       =      01101111111
~Y       =      01001101011


Note
• if the first bit of number X (least bit where (power of 2)=0) is zero the number is even else the number is odd.
	we can check it by anding with 1 => If (x&1==0) the number is even else the number is odd  (faster than %)


Assesume that we have 5 integers a,b,c,d,e
   e=a^b^c^d

For example
a= 1100100
b= 1010101
c= 1110000
d= 1100000
----------------
e= 0100001

X^X=0	X^0=X	X^X^X=X
so, if we're taking xor and number of ones is even the result is 0
		        if number of ones is odd the result is 1

Shifting
• << shift left
• >> shift right 
• X>>1 divide X by 2^1          X>>2 divide X by 2^2      (divide faster by >>)		x=000101000	x>>3=00000101
• X<<1 multiply X by 2^1        X<<2 multiply X by 2^2    (multiply faster by <<)	x=000101000	x<<3=10100000


to know all permutations of n bits
we know all numbers can be represented in n bits are from 0 to pow(2,n)-1
pow(2,n)-1 = (1<<n)-1

for(int num =0 ; num < (1<<n) ; num++){
     for(int j=0 ; j<n ; j++){
         if(num&(1<<j)){	//it means if bit in position j is on :
             //any code
         }
	else{
	    //any code
	}
     }
}


Accessing bits :

•How to check the state of bit in position p in number n?
     if(n&(1<<p)) /*bit is on*/ ;
     else  /*bit is off*/  ;

•How to On bit in position p in number n?
     n |= (1<<p);

•How to Off bit in position p in number n?
     n &= ~(1<<p);

•How to check the state of i-th 4 bits in number n?
     eg: n = 1155   =>     00000000000000000000010010000011	the 7-th 4 bits are 1001	, first (or 0-th) 4 bits are 0011
     what is the least number have 4 adjecent bits ON?  the number have representation 000...0001111     it's representation of 15
  code:
     int msk = 15;		// msk = 00....00001111   in binary
     msk&=(n>>i);

•How to On i-th 3 bits in number n?
     int msk=7;
     n |= (msk<<i);

//it's obvious now how to off i-th k bits in number n

•How to flip bit in position p in number n?
     n ^= (1<<p);

•How to flip bits in positions 1,3,5,7 (0-based) in number n?
     we need to xor bits in positions 1,4,5,7 with 1 to flip them  .. so we need a mask that has ones only on positions 1,4,5,7
     the binary representation of mask is 000...000010110010  =  178 in decimal 
  code:
     int msk = 178;
     n ^= msk;

•How to flip i-th 3 bits in number n?
     int msk=7;
     n ^= (msk<<i);

•How to get the most right ON bit of number n?
     int rightmost = (n&(-1*n));                     //because of 2's complement

•How to get the most right ON bit of some mask?
     int rightmost = (n&(-1*n));

•How to count the number of ON bits in number n?
     __builtin_popcount(n);
  or in  this way:
     int on=0;     
     while(n){
	on+=(n&1);
	n>>=1;
     }
•How to Off most right ON bit of number n?
     x&=(x-1)


Note:
Common faults
-(x&7==1)
 This condition will not be executed as you think because == will be executed before &   
 So you need to write it as    ((x&7)==1)

-1<<10 -1 is equal to 1<<9
 So you must write it (1<<10)-1